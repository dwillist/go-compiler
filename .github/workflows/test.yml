name: Run Tests


on:
  push:
    branches: [ master ]

jobs:
  tests:
    name: Unit and Integration Test
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Unit Test
      run: ./scripts/unit.sh

    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    # Run integration tests using the packaged artifact
    - name: Integration Test
      run: ./scripts/integration.sh
      env:
        GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  package-artifact:
    name: Package Artifact
    runs-on: ubuntu-latest
    needs: tests
    steps:

    - name: Set up Go 1.14
      uses: actions/setup-go@v1
      with:
        go-version: 1.14
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - run: git fetch --depth=1 origin +refs/tags/*:refs/tags/*

    - name: Get Repo Name
      run: |
        REPO_NAME="$(basename `git rev-parse --show-toplevel`)"
        echo "::set-env name=REPO_NAME::$REPO_NAME"

    - name: Create new release version
      run: |
        NEW_VERSION="$(./.github/utils/bump_patch.sh $(git describe --tags `git rev-list --tags --max-count=1`))"
        echo "::set-env name=NEW_VERSION::$NEW_VERSION"

    - name: Create Artifact Name
      run: |
        # todo don't repeat REPO_NAME
        ARTIFACT_NAME="${REPO_NAME}-$(git rev-parse HEAD)"
        echo "::set-env name=ARTIFACT_NAME::$ARTIFACT_NAME"

    - name: Create Version File
      run: |
        echo "{\"version\": \"${NEW_VERSION}\"}" > ${ARTIFACT_NAME}.json

    - name: package
      run: PACKAGE_DIR="$ARTIFACT_NAME" ./scripts/package.sh -a -v ${{ env.NEW_VERSION }}

    - name: Create Github Release Body
      id: create-release-body
      run: |
        go install github.com/cloudfoundry/packit/cargo/jam
        RELEASE_BODY=$($HOME/go/bin/jam summarize --buildpack "${ARTIFACT_NAME}.tgz" --format markdown)
        RELEASE_BODY="${RELEASE_BODY//'%'/'%25'}"
        RELEASE_BODY="${RELEASE_BODY//$'\n'/'%0A'}"
        RELEASE_BODY="${RELEASE_BODY//$'\r'/'%0D'}"
        echo "::set-output name=release_body::$RELEASE_BODY"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ env.NEW_VERSION }}
        release_name: ${{ env.NEW_VERSION }}
        body: |
          ${{ steps.create-release-body.outputs.release_body }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ${{ env.ARTIFACT_NAME }}.tgz
        asset_name: ${{ env.REPO_NAME }}-${{ env.NEW_VERSION }}.tgz
        asset_content_type: application/gzip

